去掉 bundle exec
使用rvm

使用Guard做自动化测试
Guard 会监视文件系统的变动，假如你修改了 static_pages_spec.rb，那么只有这个文件中的测试会被运行。而且，我们可以适当的设置 Guard，当 home.html.erb 被修改后，也会自动运行 static_pages_spec.rb。

使用Spork加速测试
运行 bundle exec rspec 时你或许已经察觉到了，在开始运行测试之前有好几秒的停顿时间，一旦测试开始就会很快完成。这是因为每次 RSpec 运行测试时都要重新加载整个Rails环境。Spork测试服务器11可以解决这个问题。Spork只加载一次环境，然后会为后续的测试维护一个进程池。Spork 结合 Guard（参见 3.6.2 节）使用就更强大了。

每一个page对应一个helper.rb，可以对该page添加函数并调用
symbol中没能使用连接字符‘-’

match '/about' 会自动创建具名路由函数，可以在控制器和视图中使用：
about_path -> '/about'
about_url  -> 'http://localhost:3000/about'

RSpec 会自动加载 spec/support 目录中的文件，所以我们就可以按照如下的方式编写“首页”的测试：

测试整个目录：
bundle exec rspec spec/requests/

运行全部测试：
bundle exec rspec spec/

 bundle exec rake spec

 rails generate model User name:string email:string

 和生成控制器的命令习惯不同，模型的名字是单数：控制器是 Users，而模型是 User

 这里使用的表名是复数形式（users），不过模型名是单数形式（User），这是 Rails 在用词上的一个约定，即模型表现的是单个用户的特性，而数据库表却存储了很多用户。块中最后一行 t.timestamps 是个特殊的方法，它会自动创建两个列，created_at 和 updated_at
bundle exec rake db:migrate（向上迁移）
bundle exec rake db:rollback（向下迁移）
 
rails console --sandbox

创建“测试数据库”的正确命令：
bundle exec rake test:prepare

rails generate migration add_index_to_users_email
bundle exec rake db:migrate

rails generate migration add_password_digest_to_users password_digest:string

let 方法的参数是一个 Symbol，后面可以跟着一个块，块中代码的返回值会赋给名为 Symbol 代表的局部变量

默认情况下，所有帮助方法文件中定义的方法都可以直接用在任意的视图中，不过为了便于管理，我们会把 gravatar_for 放在 Users 控制器对应的帮助文件中

重置数据库：
bundle exec rake db:reset

重置测试数据库：
bundle exec rake test:prepare

pluralize 方法的第一个参数是整数，返回值是这个数字和第二个参数文本组合在一起正确的单复数形式。pluralize 方法是由功能强大的转置器（inflector）实现的，转置器知道怎么处理大多数单词的单复数变换，甚至是一些不规则的变换方式

session 是两台电脑（例如运行有网页浏览器的客户端电脑和运行 Rails 的服务器）之间的半永久性连接，我们就是利用它来实现“登录”这一功能的。网络中常见的 session 处理方式有好几种：可以在用户关闭浏览器后清除 session；也可以提供一个“记住我”单选框让用户选择永远保存，直到用户退出后 session 才会失效

而 Sessions 资源是利用 cookie 来存储数据的。cookie 是存储在浏览器中的简单文本
实现登录功能基本上就是在实现基于 cookie 的验证机制

rails generate controller Sessions --no-test-framework
rails generate integration_test authentication_pages

注意，设置退出路由那行使用了 via: 'delete'，这个参数指明 destroy 动作要使用 DELETE 请求。


form_for(@user): Rails 会自动向 /users 地址发送 POST 请求

我们则要明确的指定资源的名称以及相应的 URL 地址：form_for(:session, url: sessions_path)
默认情况下帮助函数只可以在视图中使用，不能在控制器中使用，而我们需要同时在控制器和视图中使用帮助函数，所以我们就手动引入帮助函数所在的模块。

rails generate migration add_remember_token_to_users
bundle exec rake db:migrate
bundle exec rake test:prepare

Ruby 标准库中 SecureRandom 模块提供的 urlsafe_base64 方法可以满足我们的要求。3SecureRandom.urlsafe_base64 创建的字符串长度为 16，由 A-Z、a-z、0-9、下划线（_）和连字符（-）组成（每一位字符都有 64 种可能的情况，所以叫做“base64”）.所以两个记忆权标相等的概率就是 1/6416 = 2-96 ≈ 10-29，完全可以忽略。

its 方法，它和 it 很像，不过测试对象是参数中指定的属性而不是整个测试的对象

Active Record 是把模型的属性和数据库表中的列对应的，如果不指定 self 的话，我们就只是创建了一个名为 remember_token 的局部变量而已，这可不是我们期望得到的结果。加上 self 之后，赋值操作就会把值赋值给用户的 remember_token 属性，保存用户时，随着其他的属性一起存入数据库。

因为浏览器本身并不支持发送 PATCH 请求（表格 7.1中列出的 REST 动作要用），所以 Rails 就在 POST 请求中使用这个隐藏字段伪造了一个 PATCH 请求。3
还有一个细节需要注意一下，代码 9.3 和代码 7.17 都使用了相同的 form_for(@user) 来构建表单，那么 Rails 是怎么知道创建新用户要发送 POST 请求，而编辑用户时要发送 PATCH 请求的呢？这个问题的答案是，通过 Active Record 提供的 new_record? 方法可以检测用户是新创建的还是已经存在于数据库中的：

既然 correct_user 事前过滤器中已经定义了 @user，这两个动作中就不再需要再定义 @user 变量了。


除了 patch 方法之外，Rails 中的测试还支持 get、post 和 delete 方法，只有http 基本方法才能返回response

$ bundle exec rake db:reset
$ bundle exec rake db:populate
$ bundle exec rake test:prepare

before(:all)，在所有测试之前跑
before(:each),在每个测试之前跑

it { should be_admin } 这行代码说明用户对象应该可以响应 admin? 方法（这是 RSpec 对布尔值属性的一个约定）。

rails generate migration add_admin_to_users admin:boolean

rails generate model Micropost content:string user_id:integer
rm -f spec/factories/microposts.rb

方法	作用
micropost.user	返回该微博对应的用户对象
user.microposts	返回该用户的所有微博数组
user.microposts.create(arg)	创建一篇微博（user_id = user.id）
user.microposts.create!(arg)	创建一篇微博（失败时抛出异常）
user.microposts.build(arg)	生成一个新的微博对象（user_id = user.id）

在这段测试代码中没有使用 let，而用了 let!（读作“let bang”），因为 let 方法指定的变量是“惰性”的，只有当后续有引用时才会被创建。而我们希望这两个微博变量立即被创建，这样才能保证两篇微博时间戳的顺序是正确的，也保证了 @user.microposts 数组不是空的

会把 @user.microposts 从初始状态（Active Record 的“集合代理（collection proxy）”）转换成一个数组，以便和我们手动编写的数组比较

本例所用的匿名函数是
-> { order('created_at DESC') }
这种对象叫 Proc 或 lambda，以 -> 开头，后面跟着一个代码块，调用 call 方法时才执行块中的代码

这里，我们使用的是 find_by，而没用 find，因为如果没有找到微博 find 会抛出异常，而不会返回 nil。顺便说一下，如果你习惯处理 Ruby 异常，也可以按照下面的方式定义

def correct_user
  @micropost = current_user.microposts.find(params[:id])
rescue
  redirect_to root_url
end
