去掉 bundle exec
使用rvm

使用Guard做自动化测试
Guard 会监视文件系统的变动，假如你修改了 static_pages_spec.rb，那么只有这个文件中的测试会被运行。而且，我们可以适当的设置 Guard，当 home.html.erb 被修改后，也会自动运行 static_pages_spec.rb。

使用Spork加速测试
运行 bundle exec rspec 时你或许已经察觉到了，在开始运行测试之前有好几秒的停顿时间，一旦测试开始就会很快完成。这是因为每次 RSpec 运行测试时都要重新加载整个Rails环境。Spork测试服务器11可以解决这个问题。Spork只加载一次环境，然后会为后续的测试维护一个进程池。Spork 结合 Guard（参见 3.6.2 节）使用就更强大了。

每一个page对应一个helper.rb，可以对该page添加函数并调用
symbol中没能使用连接字符‘-’

match '/about' 会自动创建具名路由函数，可以在控制器和视图中使用：
about_path -> '/about'
about_url  -> 'http://localhost:3000/about'

RSpec 会自动加载 spec/support 目录中的文件，所以我们就可以按照如下的方式编写“首页”的测试：

测试整个目录：
bundle exec rspec spec/requests/

运行全部测试：
bundle exec rspec spec/

 bundle exec rake spec

 rails generate model User name:string email:string

 和生成控制器的命令习惯不同，模型的名字是单数：控制器是 Users，而模型是 User

 这里使用的表名是复数形式（users），不过模型名是单数形式（User），这是 Rails 在用词上的一个约定，即模型表现的是单个用户的特性，而数据库表却存储了很多用户。块中最后一行 t.timestamps 是个特殊的方法，它会自动创建两个列，created_at 和 updated_at
bundle exec rake db:migrate（向上迁移）
bundle exec rake db:rollback（向下迁移）
 
rails console --sandbox

创建“测试数据库”的正确命令：
bundle exec rake test:prepare

rails generate migration add_index_to_users_email
bundle exec rake db:migrate

rails generate migration add_password_digest_to_users password_digest:string

let 方法的参数是一个 Symbol，后面可以跟着一个块，块中代码的返回值会赋给名为 Symbol 代表的局部变量